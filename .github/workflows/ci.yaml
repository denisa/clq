name: ci
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*'
  pull_request:
env:
  GO: 1.15.x
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/setup-go@v2.1.3
      with:
        go-version: ${{ env.GO }}
    - uses: actions/checkout@v2.3.4
    - run: make lcov
    - name: Send coverage
      if: matrix.platform == 'ubuntu-latest'
      uses: coverallsapp/github-action@1.1.3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: coverage.lcov
    - if: matrix.platform == 'ubuntu-latest'
      run: make docker-test
    - if: matrix.platform == 'ubuntu-latest' && github.event_name == 'pull_request'
      name: Release validation of the CHANGELOG.md
      run: |
        make build
        release_version=$(dist/clq -release -query 'releases[0].version' CHANGELOG.md)
        release_tag="v${release_version}"
        if git ls-remote --exit-code --tags origin "refs/tags/$release_tag" >/dev/null 2>&1; then
          echo "::error ::tag $release_tag exists"
          exit 1
        fi
  tag:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v2.1.3
      with:
        go-version: ${{ env.GO }}
    - uses: actions/checkout@v2.3.4
    - run: make build
    - name: Extract release information
      id: release_information
      run: |
        release_version=$(dist/clq -release -query 'releases[0].version' CHANGELOG.md)
        release_tag="v${release_version}"

        release_name=$(dist/clq -release -query 'releases[0].label' CHANGELOG.md)
        if [ -z "$release_name" ]; then
          release_name="Release $release_version"
        fi

        release_status=$(dist/clq -release -query 'releases[0].status' CHANGELOG.md)

        release_changes=$(dist/clq -release -output md -query 'releases[0].changes[]/' CHANGELOG.md)

        echo "::set-output name=changes::${release_changes//$'\n'/'%0A'}"
        echo "::set-output name=name::$release_name"
        echo "::set-output name=status::$release_status"
        echo "::set-output name=tag::$release_tag"
        echo "::set-output name=version::$release_version"
    - run: |
        release_version=${{ steps.release_information.outputs.version }}
        VERSION=$release_version make assertVersionDefined build-all
        test "$(dist/clq-linux-amd64 -version)" = "clq $release_version"
    - uses: actions/create-release@v1.1.4
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_information.outputs.tag }}
        release_name: ${{ steps.release_information.outputs.name }}
        prerelease: ${{ steps.release_information.outputs.status == 'prereleased' }}
        body: ${{ steps.release_information.outputs.changes }}
    - uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/clq-darwin-amd64
        asset_name: clq-darwin-amd64
        asset_content_type: application/octet-stream
    - uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/clq-linux-amd64
        asset_name: clq-linux-amd64
        asset_content_type: application/octet-stream
    - uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/clq-windows-amd64
        asset_name: clq-windows-amd64
        asset_content_type: application/octet-stream
