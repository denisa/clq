name: cd
on:
  push:
    tags:
    - v*
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v2.0.3
      with:
        go-version: 1.14.x
    - uses: actions/checkout@v2.2.0
    - run: make build build-all
    - name: Extract release information
      id: extract_release_info
      run: |
        release_name=$(dist/clq -release -query 'releases[0].label' CHANGELOG.md)
        if [ -z "$release_name" ]; then
          release_name="Release $(dist/clq -release -query 'releases[0].version' CHANGELOG.md)"
        fi
        echo "::set-output name=release_name::$release_name"
    - uses: actions/create-release@v1.1.0
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.extract_release_info.outputs.release_name }}
    - uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/clq-darwin-amd64
        asset_name: clq-darwin-amd64
        asset_content_type: application/octet-stream
    - uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/clq-linux-amd64
        asset_name: clq-linux-amd64
        asset_content_type: application/octet-stream
    - uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/clq-windows-amd64
        asset_name: clq-windows-amd64
        asset_content_type: application/octet-stream
